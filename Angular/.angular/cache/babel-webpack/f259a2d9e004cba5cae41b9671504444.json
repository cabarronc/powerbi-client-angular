{"ast":null,"code":"import _asyncToGenerator from \"C:/xampp/htdocs/ProyectoAngular/PowerBi-Angular/powerbi-client-angular/Angular/node_modules/@babel/runtime/helpers/esm/asyncToGenerator\";\nimport { models } from 'powerbi-client';\nimport { PowerBIReportEmbedComponent } from 'powerbi-client-angular';\nimport 'powerbi-report-authoring';\nimport { errorClass, errorElement, hidden, position, reportUrl, successClass, successElement } from '../../../constants';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"../../services/http.service\";\nimport * as i2 from \"powerbi-client-angular\";\nconst _c0 = [\"status\"];\nconst _c1 = [\"embedReportBtn\"];\n\nfunction CreceComponent_ng_template_1_Template(rf, ctx) {}\n\nexport class CreceComponent {\n  constructor(httpService, element) {\n    this.httpService = httpService;\n    this.element = element; // Track Report embedding status\n\n    this.isEmbedded = false; // Overall status message of embedding\n\n    this.displayMessage = ''; // CSS Class to be passed to the wrapper\n    // Hide the report container initially\n\n    this.reportClass = 'report-container hidden'; // Flag which specify the type of embedding\n\n    this.phasedEmbeddingFlag = false; // Pass the basic embed configurations to the wrapper to bootstrap the report on first load\n    // Values for properties like embedUrl, accessToken and settings will be set on click of button\n\n    this.reportConfig = {\n      type: 'report',\n      embedUrl: 'https://app.powerbi.com/view?r=eyJrIjoiYjhkMzEwODQtOGVjYS00MTQ0LWJkZjItODVjM2Q3NTEzNmM4IiwidCI6IjYyOGMwZTc3LTViNTUtNDRkZi04YmUxLWVjYTNiMzdiOWNkMCIsImMiOjR9&pageName=ReportSection',\n      tokenType: models.TokenType.Embed,\n      accessToken: undefined,\n      settings: undefined\n    };\n    /**\r\n     * Map of event handlers to be applied to the embedded report\r\n     */\n    // Update event handlers for the report by redefining the map using this.eventHandlersMap\n    // Set event handler to null if event needs to be removed\n    // More events can be provided from here\n    // https://docs.microsoft.com/en-us/javascript/api/overview/powerbi/handle-events#report-events\n\n    this.eventHandlersMap = new Map([['loaded', () => console.log('Report has loaded')], ['rendered', () => {\n      console.log('Report has rendered'); // Set displayMessage to empty when rendered for the first time\n\n      if (!this.isEmbedded) {\n        this.displayMessage = 'Use the buttons above to interact with the report using Power BI Client APIs.';\n      } // Update embed status\n\n\n      this.isEmbedded = true;\n    }], ['error', event => {\n      if (event) {\n        console.error(event.detail);\n      }\n    }], ['visualClicked', () => console.log('visual clicked')], ['pageChanged', event => console.log(event)]]);\n  }\n  /**\r\n   * Embeds report\r\n   *\r\n   * @returns Promise<void>\r\n   */\n\n\n  embedReport() {\n    var _this = this;\n\n    return _asyncToGenerator(function* () {\n      let reportConfigResponse; // Get the embed config from the service and set the reportConfigResponse\n\n      try {\n        reportConfigResponse = yield _this.httpService.getEmbedConfig(reportUrl).toPromise();\n      } catch (error) {\n        // Prepare status message for Embed failure\n        yield _this.prepareDisplayMessageForEmbed(errorElement, errorClass); //this.displayMessage = `Failed to fetch config for report. Status: ${error.statusText} Status Code: ${error.status}`;\n\n        console.error(_this.displayMessage);\n        return;\n      } // Update the reportConfig to embed the PowerBI report\n\n\n      _this.reportConfig = Object.assign(Object.assign({}, _this.reportConfig), {\n        id: reportConfigResponse.Id,\n        embedUrl: reportConfigResponse.EmbedUrl,\n        accessToken: reportConfigResponse.EmbedToken.Token\n      }); // Get the reference of the report-container div\n\n      const reportDiv = _this.element.nativeElement.querySelector('.report-container');\n\n      if (reportDiv) {\n        // When Embed report is clicked, show the report container div\n        reportDiv.classList.remove(hidden);\n      } // Get the reference of the display-message div\n\n\n      const displayMessage = _this.element.nativeElement.querySelector('.display-message');\n\n      if (displayMessage) {\n        // When Embed report is clicked, change the position of the display-message\n        displayMessage.classList.remove(position);\n      } // Prepare status message for Embed success\n\n\n      yield _this.prepareDisplayMessageForEmbed(successElement, successClass); // Update the display message\n\n      _this.displayMessage = 'Reporte CRECE de los Programas Presupuestales';\n    })();\n  }\n  /**\r\n   * Handle Report embedding flow\r\n   * @param img Image to show with the display message\r\n   * @param type Type of the message\r\n   *\r\n   * @returns Promise<void>\r\n   */\n\n\n  prepareDisplayMessageForEmbed(img, type) {\n    var _this2 = this;\n\n    return _asyncToGenerator(function* () {\n      // Remove the Embed Report button from UI\n      _this2.embedBtnRef.nativeElement.remove(); // Prepend the Image element to the display message\n\n\n      _this2.statusRef.nativeElement.prepend(img); // Set type of the message\n\n\n      _this2.statusRef.nativeElement.classList.add(type);\n    })();\n  }\n  /**\r\n   * Delete visual\r\n   *\r\n   * @returns Promise<void>\r\n   */\n\n\n  deleteVisual() {\n    var _this3 = this;\n\n    return _asyncToGenerator(function* () {\n      // Get report from the wrapper component\n      const report = _this3.reportObj.getReport();\n\n      if (!report) {\n        // Prepare status message for Error\n        _this3.prepareStatusMessage(errorElement, errorClass);\n\n        _this3.displayMessage = 'Report not available.';\n        console.log(_this3.displayMessage);\n        return;\n      } // Get all the pages of the report\n\n\n      const pages = yield report.getPages(); // Check if all the pages of the report deleted\n\n      if (pages.length === 0) {\n        // Prepare status message for Error\n        _this3.prepareStatusMessage(errorElement, errorClass);\n\n        _this3.displayMessage = 'No pages found.';\n        console.log(_this3.displayMessage);\n        return;\n      } // Get active page of the report\n\n\n      const activePage = pages.find(page => page.isActive);\n\n      if (activePage) {\n        // Get all visuals in the active page of the report\n        const visuals = yield activePage.getVisuals();\n\n        if (visuals.length === 0) {\n          // Prepare status message for Error\n          _this3.prepareStatusMessage(errorElement, errorClass);\n\n          _this3.displayMessage = 'No visuals found.';\n          console.log(_this3.displayMessage);\n          return;\n        } // Get first visible visual\n\n\n        const visual = visuals.find(v => {\n          var _a;\n\n          return ((_a = v.layout.displayState) === null || _a === void 0 ? void 0 : _a.mode) === models.VisualContainerDisplayMode.Visible;\n        }); // No visible visual found\n\n        if (!visual) {\n          // Prepare status message for Error\n          _this3.prepareStatusMessage(errorElement, errorClass);\n\n          _this3.displayMessage = 'No visible visual available to delete.';\n          console.log(_this3.displayMessage);\n          return;\n        }\n\n        try {\n          // Delete the visual using powerbi-report-authoring\n          // For more information: https://docs.microsoft.com/en-us/javascript/api/overview/powerbi/report-authoring-overview\n          const response = yield activePage.deleteVisual(visual.name); // Prepare status message for success\n\n          _this3.prepareStatusMessage(successElement, successClass);\n\n          _this3.displayMessage = `${visual.type} visual was deleted.`;\n          console.log(_this3.displayMessage);\n          return response;\n        } catch (error) {\n          console.error(error);\n        }\n      }\n    })();\n  }\n  /**\r\n   * Hide Filter Pane\r\n   *\r\n   * @returns Promise<IHttpPostMessageResponse<void> | undefined>\r\n   */\n\n\n  hideFilterPane() {\n    var _this4 = this;\n\n    return _asyncToGenerator(function* () {\n      // Get report from the wrapper component\n      const report = _this4.reportObj.getReport();\n\n      if (!report) {\n        // Prepare status message for Error\n        _this4.prepareStatusMessage(errorElement, errorClass);\n\n        _this4.displayMessage = 'Report not available.';\n        console.log(_this4.displayMessage);\n        return;\n      } // New settings to hide filter pane\n\n\n      const settings = {\n        panes: {\n          filters: {\n            expanded: false,\n            visible: false\n          }\n        }\n      };\n\n      try {\n        const response = yield report.updateSettings(settings); // Prepare status message for success\n\n        _this4.prepareStatusMessage(successElement, successClass);\n\n        _this4.displayMessage = 'Filter pane is hidden.';\n        console.log(_this4.displayMessage);\n        return response;\n      } catch (error) {\n        console.error(error);\n        return;\n      }\n    })();\n  }\n  /**\r\n   * Set data selected event\r\n   *\r\n   * @returns void\r\n   */\n\n\n  setDataSelectedEvent() {\n    // Adding dataSelected event in eventHandlersMap\n    this.eventHandlersMap = new Map([...this.eventHandlersMap, ['dataSelected', event => console.log(event)]]); // Prepare status message for success\n\n    this.prepareStatusMessage(successElement, successClass);\n    this.displayMessage = 'Data Selected event set successfully. Select data to see event in console.';\n  }\n  /**\r\n   * Prepare status message while using JS SDK APIs\r\n   * @param img Image to show with the display message\r\n   * @param type Type of the message\r\n   *\r\n   * @returns void\r\n   */\n\n\n  prepareStatusMessage(img, type) {\n    // Prepend Image to the display message\n    this.statusRef.nativeElement.prepend(img); // Add class to the display message\n\n    this.statusRef.nativeElement.classList.add(type);\n  }\n\n}\n\nCreceComponent.ɵfac = function CreceComponent_Factory(t) {\n  return new (t || CreceComponent)(i0.ɵɵdirectiveInject(i1.HttpService), i0.ɵɵdirectiveInject(i0.ElementRef));\n};\n\nCreceComponent.ɵcmp = /*@__PURE__*/i0.ɵɵdefineComponent({\n  type: CreceComponent,\n  selectors: [[\"app-crece\"]],\n  viewQuery: function CreceComponent_Query(rf, ctx) {\n    if (rf & 1) {\n      i0.ɵɵviewQuery(PowerBIReportEmbedComponent, 5);\n      i0.ɵɵviewQuery(_c0, 5);\n      i0.ɵɵviewQuery(_c1, 5);\n    }\n\n    if (rf & 2) {\n      let _t;\n\n      i0.ɵɵqueryRefresh(_t = i0.ɵɵloadQuery()) && (ctx.reportObj = _t.first);\n      i0.ɵɵqueryRefresh(_t = i0.ɵɵloadQuery()) && (ctx.statusRef = _t.first);\n      i0.ɵɵqueryRefresh(_t = i0.ɵɵloadQuery()) && (ctx.embedBtnRef = _t.first);\n    }\n  },\n  decls: 4,\n  vars: 4,\n  consts: [[1, \"overflow-auto\"], [\"embedReportFlow\", \"\"], [3, \"embedConfig\", \"cssClassName\", \"phasedEmbedding\", \"eventHandlers\"]],\n  template: function CreceComponent_Template(rf, ctx) {\n    if (rf & 1) {\n      i0.ɵɵelementStart(0, \"div\", 0);\n      i0.ɵɵtemplate(1, CreceComponent_ng_template_1_Template, 0, 0, \"ng-template\", null, 1, i0.ɵɵtemplateRefExtractor);\n      i0.ɵɵelement(3, \"powerbi-report\", 2);\n      i0.ɵɵelementEnd();\n    }\n\n    if (rf & 2) {\n      i0.ɵɵadvance(3);\n      i0.ɵɵproperty(\"embedConfig\", ctx.reportConfig)(\"cssClassName\", ctx.reportClass)(\"phasedEmbedding\", ctx.phasedEmbeddingFlag)(\"eventHandlers\", ctx.eventHandlersMap);\n    }\n  },\n  directives: [i2.PowerBIReportEmbedComponent],\n  styles: [\"\\n/*# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IiIsImZpbGUiOiJjcmVjZS5jb21wb25lbnQuY3NzIn0= */\"],\n  changeDetection: 0\n});","map":{"version":3,"sources":["C:/xampp/htdocs/ProyectoAngular/PowerBi-Angular/powerbi-client-angular/Angular/demo/src/app/Planeacion/crece/crece.component.ts"],"names":["models","PowerBIReportEmbedComponent","errorClass","errorElement","hidden","position","reportUrl","successClass","successElement","i0","i1","i2","_c0","_c1","CreceComponent_ng_template_1_Template","rf","ctx","CreceComponent","constructor","httpService","element","isEmbedded","displayMessage","reportClass","phasedEmbeddingFlag","reportConfig","type","embedUrl","tokenType","TokenType","Embed","accessToken","undefined","settings","eventHandlersMap","Map","console","log","event","error","detail","embedReport","reportConfigResponse","getEmbedConfig","toPromise","prepareDisplayMessageForEmbed","Object","assign","id","Id","EmbedUrl","EmbedToken","Token","reportDiv","nativeElement","querySelector","classList","remove","img","embedBtnRef","statusRef","prepend","add","deleteVisual","report","reportObj","getReport","prepareStatusMessage","pages","getPages","length","activePage","find","page","isActive","visuals","getVisuals","visual","v","_a","layout","displayState","mode","VisualContainerDisplayMode","Visible","response","name","hideFilterPane","panes","filters","expanded","visible","updateSettings","setDataSelectedEvent","ɵfac","CreceComponent_Factory","t","ɵɵdirectiveInject","HttpService","ElementRef","ɵcmp","ɵɵdefineComponent","selectors","viewQuery","CreceComponent_Query","ɵɵviewQuery","_t","ɵɵqueryRefresh","ɵɵloadQuery","first","decls","vars","consts","template","CreceComponent_Template","ɵɵelementStart","ɵɵtemplate","ɵɵtemplateRefExtractor","ɵɵelement","ɵɵelementEnd","ɵɵadvance","ɵɵproperty","directives","styles","changeDetection"],"mappings":"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","sourcesContent":["import { models } from 'powerbi-client';\r\nimport { PowerBIReportEmbedComponent } from 'powerbi-client-angular';\r\nimport 'powerbi-report-authoring';\r\nimport { errorClass, errorElement, hidden, position, reportUrl, successClass, successElement } from '../../../constants';\r\nimport * as i0 from \"@angular/core\";\r\nimport * as i1 from \"../../services/http.service\";\r\nimport * as i2 from \"powerbi-client-angular\";\r\nconst _c0 = [\"status\"];\r\nconst _c1 = [\"embedReportBtn\"];\r\nfunction CreceComponent_ng_template_1_Template(rf, ctx) { }\r\nexport class CreceComponent {\r\n    constructor(httpService, element) {\r\n        this.httpService = httpService;\r\n        this.element = element;\r\n        // Track Report embedding status\r\n        this.isEmbedded = false;\r\n        // Overall status message of embedding\r\n        this.displayMessage = '';\r\n        // CSS Class to be passed to the wrapper\r\n        // Hide the report container initially\r\n        this.reportClass = 'report-container hidden';\r\n        // Flag which specify the type of embedding\r\n        this.phasedEmbeddingFlag = false;\r\n        // Pass the basic embed configurations to the wrapper to bootstrap the report on first load\r\n        // Values for properties like embedUrl, accessToken and settings will be set on click of button\r\n        this.reportConfig = {\r\n            type: 'report',\r\n            embedUrl: 'https://app.powerbi.com/view?r=eyJrIjoiYjhkMzEwODQtOGVjYS00MTQ0LWJkZjItODVjM2Q3NTEzNmM4IiwidCI6IjYyOGMwZTc3LTViNTUtNDRkZi04YmUxLWVjYTNiMzdiOWNkMCIsImMiOjR9&pageName=ReportSection',\r\n            tokenType: models.TokenType.Embed,\r\n            accessToken: undefined,\r\n            settings: undefined,\r\n        };\r\n        /**\r\n         * Map of event handlers to be applied to the embedded report\r\n         */\r\n        // Update event handlers for the report by redefining the map using this.eventHandlersMap\r\n        // Set event handler to null if event needs to be removed\r\n        // More events can be provided from here\r\n        // https://docs.microsoft.com/en-us/javascript/api/overview/powerbi/handle-events#report-events\r\n        this.eventHandlersMap = new Map([\r\n            ['loaded', () => console.log('Report has loaded')],\r\n            [\r\n                'rendered',\r\n                () => {\r\n                    console.log('Report has rendered');\r\n                    // Set displayMessage to empty when rendered for the first time\r\n                    if (!this.isEmbedded) {\r\n                        this.displayMessage = 'Use the buttons above to interact with the report using Power BI Client APIs.';\r\n                    }\r\n                    // Update embed status\r\n                    this.isEmbedded = true;\r\n                },\r\n            ],\r\n            [\r\n                'error',\r\n                (event) => {\r\n                    if (event) {\r\n                        console.error(event.detail);\r\n                    }\r\n                },\r\n            ],\r\n            ['visualClicked', () => console.log('visual clicked')],\r\n            ['pageChanged', (event) => console.log(event)],\r\n        ]);\r\n    }\r\n    /**\r\n     * Embeds report\r\n     *\r\n     * @returns Promise<void>\r\n     */\r\n    async embedReport() {\r\n        let reportConfigResponse;\r\n        // Get the embed config from the service and set the reportConfigResponse\r\n        try {\r\n            reportConfigResponse = await this.httpService.getEmbedConfig(reportUrl).toPromise();\r\n        }\r\n        catch (error) {\r\n            // Prepare status message for Embed failure\r\n            await this.prepareDisplayMessageForEmbed(errorElement, errorClass);\r\n            //this.displayMessage = `Failed to fetch config for report. Status: ${error.statusText} Status Code: ${error.status}`;\r\n            console.error(this.displayMessage);\r\n            return;\r\n        }\r\n        // Update the reportConfig to embed the PowerBI report\r\n        this.reportConfig = Object.assign(Object.assign({}, this.reportConfig), { id: reportConfigResponse.Id, embedUrl: reportConfigResponse.EmbedUrl, accessToken: reportConfigResponse.EmbedToken.Token });\r\n        // Get the reference of the report-container div\r\n        const reportDiv = this.element.nativeElement.querySelector('.report-container');\r\n        if (reportDiv) {\r\n            // When Embed report is clicked, show the report container div\r\n            reportDiv.classList.remove(hidden);\r\n        }\r\n        // Get the reference of the display-message div\r\n        const displayMessage = this.element.nativeElement.querySelector('.display-message');\r\n        if (displayMessage) {\r\n            // When Embed report is clicked, change the position of the display-message\r\n            displayMessage.classList.remove(position);\r\n        }\r\n        // Prepare status message for Embed success\r\n        await this.prepareDisplayMessageForEmbed(successElement, successClass);\r\n        // Update the display message\r\n        this.displayMessage = 'Reporte CRECE de los Programas Presupuestales';\r\n    }\r\n    /**\r\n     * Handle Report embedding flow\r\n     * @param img Image to show with the display message\r\n     * @param type Type of the message\r\n     *\r\n     * @returns Promise<void>\r\n     */\r\n    async prepareDisplayMessageForEmbed(img, type) {\r\n        // Remove the Embed Report button from UI\r\n        this.embedBtnRef.nativeElement.remove();\r\n        // Prepend the Image element to the display message\r\n        this.statusRef.nativeElement.prepend(img);\r\n        // Set type of the message\r\n        this.statusRef.nativeElement.classList.add(type);\r\n    }\r\n    /**\r\n     * Delete visual\r\n     *\r\n     * @returns Promise<void>\r\n     */\r\n    async deleteVisual() {\r\n        // Get report from the wrapper component\r\n        const report = this.reportObj.getReport();\r\n        if (!report) {\r\n            // Prepare status message for Error\r\n            this.prepareStatusMessage(errorElement, errorClass);\r\n            this.displayMessage = 'Report not available.';\r\n            console.log(this.displayMessage);\r\n            return;\r\n        }\r\n        // Get all the pages of the report\r\n        const pages = await report.getPages();\r\n        // Check if all the pages of the report deleted\r\n        if (pages.length === 0) {\r\n            // Prepare status message for Error\r\n            this.prepareStatusMessage(errorElement, errorClass);\r\n            this.displayMessage = 'No pages found.';\r\n            console.log(this.displayMessage);\r\n            return;\r\n        }\r\n        // Get active page of the report\r\n        const activePage = pages.find((page) => page.isActive);\r\n        if (activePage) {\r\n            // Get all visuals in the active page of the report\r\n            const visuals = await activePage.getVisuals();\r\n            if (visuals.length === 0) {\r\n                // Prepare status message for Error\r\n                this.prepareStatusMessage(errorElement, errorClass);\r\n                this.displayMessage = 'No visuals found.';\r\n                console.log(this.displayMessage);\r\n                return;\r\n            }\r\n            // Get first visible visual\r\n            const visual = visuals.find((v) => { var _a; return ((_a = v.layout.displayState) === null || _a === void 0 ? void 0 : _a.mode) === models.VisualContainerDisplayMode.Visible; });\r\n            // No visible visual found\r\n            if (!visual) {\r\n                // Prepare status message for Error\r\n                this.prepareStatusMessage(errorElement, errorClass);\r\n                this.displayMessage = 'No visible visual available to delete.';\r\n                console.log(this.displayMessage);\r\n                return;\r\n            }\r\n            try {\r\n                // Delete the visual using powerbi-report-authoring\r\n                // For more information: https://docs.microsoft.com/en-us/javascript/api/overview/powerbi/report-authoring-overview\r\n                const response = await activePage.deleteVisual(visual.name);\r\n                // Prepare status message for success\r\n                this.prepareStatusMessage(successElement, successClass);\r\n                this.displayMessage = `${visual.type} visual was deleted.`;\r\n                console.log(this.displayMessage);\r\n                return response;\r\n            }\r\n            catch (error) {\r\n                console.error(error);\r\n            }\r\n        }\r\n    }\r\n    /**\r\n     * Hide Filter Pane\r\n     *\r\n     * @returns Promise<IHttpPostMessageResponse<void> | undefined>\r\n     */\r\n    async hideFilterPane() {\r\n        // Get report from the wrapper component\r\n        const report = this.reportObj.getReport();\r\n        if (!report) {\r\n            // Prepare status message for Error\r\n            this.prepareStatusMessage(errorElement, errorClass);\r\n            this.displayMessage = 'Report not available.';\r\n            console.log(this.displayMessage);\r\n            return;\r\n        }\r\n        // New settings to hide filter pane\r\n        const settings = {\r\n            panes: {\r\n                filters: {\r\n                    expanded: false,\r\n                    visible: false,\r\n                },\r\n            },\r\n        };\r\n        try {\r\n            const response = await report.updateSettings(settings);\r\n            // Prepare status message for success\r\n            this.prepareStatusMessage(successElement, successClass);\r\n            this.displayMessage = 'Filter pane is hidden.';\r\n            console.log(this.displayMessage);\r\n            return response;\r\n        }\r\n        catch (error) {\r\n            console.error(error);\r\n            return;\r\n        }\r\n    }\r\n    /**\r\n     * Set data selected event\r\n     *\r\n     * @returns void\r\n     */\r\n    setDataSelectedEvent() {\r\n        // Adding dataSelected event in eventHandlersMap\r\n        this.eventHandlersMap = new Map([\r\n            ...this.eventHandlersMap,\r\n            ['dataSelected', (event) => console.log(event)],\r\n        ]);\r\n        // Prepare status message for success\r\n        this.prepareStatusMessage(successElement, successClass);\r\n        this.displayMessage = 'Data Selected event set successfully. Select data to see event in console.';\r\n    }\r\n    /**\r\n     * Prepare status message while using JS SDK APIs\r\n     * @param img Image to show with the display message\r\n     * @param type Type of the message\r\n     *\r\n     * @returns void\r\n     */\r\n    prepareStatusMessage(img, type) {\r\n        // Prepend Image to the display message\r\n        this.statusRef.nativeElement.prepend(img);\r\n        // Add class to the display message\r\n        this.statusRef.nativeElement.classList.add(type);\r\n    }\r\n}\r\nCreceComponent.ɵfac = function CreceComponent_Factory(t) { return new (t || CreceComponent)(i0.ɵɵdirectiveInject(i1.HttpService), i0.ɵɵdirectiveInject(i0.ElementRef)); };\r\nCreceComponent.ɵcmp = /*@__PURE__*/ i0.ɵɵdefineComponent({ type: CreceComponent, selectors: [[\"app-crece\"]], viewQuery: function CreceComponent_Query(rf, ctx) { if (rf & 1) {\r\n        i0.ɵɵviewQuery(PowerBIReportEmbedComponent, 5);\r\n        i0.ɵɵviewQuery(_c0, 5);\r\n        i0.ɵɵviewQuery(_c1, 5);\r\n    } if (rf & 2) {\r\n        let _t;\r\n        i0.ɵɵqueryRefresh(_t = i0.ɵɵloadQuery()) && (ctx.reportObj = _t.first);\r\n        i0.ɵɵqueryRefresh(_t = i0.ɵɵloadQuery()) && (ctx.statusRef = _t.first);\r\n        i0.ɵɵqueryRefresh(_t = i0.ɵɵloadQuery()) && (ctx.embedBtnRef = _t.first);\r\n    } }, decls: 4, vars: 4, consts: [[1, \"overflow-auto\"], [\"embedReportFlow\", \"\"], [3, \"embedConfig\", \"cssClassName\", \"phasedEmbedding\", \"eventHandlers\"]], template: function CreceComponent_Template(rf, ctx) { if (rf & 1) {\r\n        i0.ɵɵelementStart(0, \"div\", 0);\r\n        i0.ɵɵtemplate(1, CreceComponent_ng_template_1_Template, 0, 0, \"ng-template\", null, 1, i0.ɵɵtemplateRefExtractor);\r\n        i0.ɵɵelement(3, \"powerbi-report\", 2);\r\n        i0.ɵɵelementEnd();\r\n    } if (rf & 2) {\r\n        i0.ɵɵadvance(3);\r\n        i0.ɵɵproperty(\"embedConfig\", ctx.reportConfig)(\"cssClassName\", ctx.reportClass)(\"phasedEmbedding\", ctx.phasedEmbeddingFlag)(\"eventHandlers\", ctx.eventHandlersMap);\r\n    } }, directives: [i2.PowerBIReportEmbedComponent], styles: [\"\\n/*# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IiIsImZpbGUiOiJjcmVjZS5jb21wb25lbnQuY3NzIn0= */\"], changeDetection: 0 });\r\n"]},"metadata":{},"sourceType":"module"}