{"ast":null,"code":"import * as i0 from '@angular/core';\nimport { Component, Input, ViewChild, NgModule } from '@angular/core';\nimport { service, factories } from 'powerbi-client'; // Copyright (c) Microsoft Corporation.\n// Licensed under the MIT License.\n\n/**\r\n * Get JSON string representation of the given map.\r\n *\r\n * @param map Map of event and corresponding handler method\r\n *\r\n */\n\nconst _c0 = [\"reportContainer\"];\nconst _c1 = [\"embedConfig\", \"\"];\nconst _c2 = [\"dashboardContainer\"];\nconst _c3 = [\"tileContainer\"];\nconst _c4 = [\"paginatedReportContainer\"];\nconst _c5 = [\"visualContainer\"];\nconst _c6 = [\"qnaContainer\"];\n\nconst stringifyMap = map => {\n  // Return empty string for empty/null map\n  if (!map) {\n    return '';\n  } // Get entries of map as array\n\n\n  const mapEntries = Array.from(map); // Return JSON string\n\n  return JSON.stringify(mapEntries.map(mapEntry => // Convert event handler method to a string containing its source code for comparison\n  [mapEntry[0], mapEntry[1] ? mapEntry[1].toString() : '']));\n}; // Copyright (c) Microsoft Corporation.\n\n/**\r\n * Base component to hold common properties for all the Power BI entities\r\n */\n\n\nclass PowerBIEmbedComponent {\n  constructor() {\n    // JSON stringify of prev event handler map\n    this.prevEventHandlerMapString = '';\n  }\n\n  ngOnInit() {\n    // Initialize powerbi variable for child component\n    if (this.service) {\n      this.powerbi = this.service;\n    } else {\n      this.powerbi = new service.Service(factories.hpmFactory, factories.wpmpFactory, factories.routerFactory);\n    }\n  }\n  /**\r\n   * Sets all event handlers from the input on the embedded entity\r\n   *\r\n   * @param embed Embedded object\r\n   * @param eventHandlerMap Array of event handlers to be set on embedded entity\r\n   * @returns void\r\n   */\n\n\n  setEventHandlers(embed, eventHandlerMap) {\n    // Get string representation of eventHandlerMap\n    const eventHandlerMapString = stringifyMap(eventHandlerMap); // Check if event handler map changed\n\n    if (this.prevEventHandlerMapString === eventHandlerMapString) {\n      return;\n    } // Update prev string representation of event handler map\n\n\n    this.prevEventHandlerMapString = eventHandlerMapString; // Apply all provided event handlers\n\n    eventHandlerMap.forEach((eventHandlerMethod, eventName) => {\n      // Removes event handler for this event\n      embed.off(eventName); // Event handler is effectively removed for this event when eventHandlerMethod is null\n\n      if (eventHandlerMethod) {\n        // Set single event handler\n        embed.on(eventName, event => {\n          eventHandlerMethod(event, embed);\n        });\n      }\n    });\n  }\n\n}\n\nPowerBIEmbedComponent.ɵfac = function PowerBIEmbedComponent_Factory(t) {\n  return new (t || PowerBIEmbedComponent)();\n};\n\nPowerBIEmbedComponent.ɵcmp = /* @__PURE__ */i0.ɵɵdefineComponent({\n  type: PowerBIEmbedComponent,\n  selectors: [[\"powerbi-embed\"]],\n  inputs: {\n    cssClassName: \"cssClassName\",\n    service: \"service\"\n  },\n  decls: 0,\n  vars: 0,\n  template: function PowerBIEmbedComponent_Template(rf, ctx) {},\n  encapsulation: 2\n});\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(PowerBIEmbedComponent, [{\n    type: Component,\n    args: [{\n      selector: 'powerbi-embed',\n      template: ''\n    }]\n  }], null, {\n    cssClassName: [{\n      type: Input\n    }],\n    service: [{\n      type: Input\n    }]\n  });\n})(); // Copyright (c) Microsoft Corporation.\n\n/**\r\n * Report component to embed the report, extends the Base Component\r\n */\n\n\nclass PowerBIReportEmbedComponent extends PowerBIEmbedComponent {\n  constructor() {\n    super(); // Phased embedding flag (Optional)\n\n    this.phasedEmbedding = false;\n  } // Getter for this._embed\n\n\n  get embed() {\n    return this._embed;\n  } // Setter for this._embed\n\n\n  set embed(newEmbedInstance) {\n    this._embed = newEmbedInstance;\n  } // Returns embed object to calling function\n\n\n  getReport() {\n    return this._embed;\n  }\n\n  ngOnInit() {\n    // Initialize PowerBI service instance variable from parent\n    super.ngOnInit();\n  }\n\n  ngOnChanges(changes) {\n    if (changes.embedConfig) {\n      const prevEmbedConfig = changes.embedConfig.previousValue; // Check if the function is being called for the first time\n\n      if (!prevEmbedConfig) {\n        return;\n      } // Input from parent get updated, thus call embedOrUpdateReport function\n\n\n      this.embedOrUpdateReport(prevEmbedConfig);\n    } // Set event handlers if available\n\n\n    if (this.eventHandlers && this.embed) {\n      super.setEventHandlers(this.embed, this.eventHandlers);\n    }\n  }\n\n  ngAfterViewInit() {\n    // Check if container exists on the UI\n    if (this.containerRef.nativeElement) {\n      // Decide to embed, load or bootstrap\n      if (this.embedConfig.accessToken && this.embedConfig.embedUrl) {\n        this.embedReport();\n      } else {\n        this.embed = this.powerbi.bootstrap(this.containerRef.nativeElement, this.embedConfig);\n      }\n    } // Set event handlers if available\n\n\n    if (this.eventHandlers && this.embed) {\n      super.setEventHandlers(this.embed, this.eventHandlers);\n    }\n  }\n  /**\r\n   * Embed or load the PowerBI Report based on phasedEmbedding flag\r\n   *\r\n   * @returns void\r\n   */\n\n\n  embedReport() {\n    // Check if the HTML container is rendered and available\n    if (!this.containerRef.nativeElement) {\n      return;\n    } // Load when phasedEmbedding flag is true, embed otherwise\n\n\n    if (this.phasedEmbedding) {\n      this.embed = this.powerbi.load(this.containerRef.nativeElement, this.embedConfig);\n    } else {\n      this.embed = this.powerbi.embed(this.containerRef.nativeElement, this.embedConfig);\n    }\n  }\n  /**\r\n   * When component updates, choose to _embed_ or _load_ the powerbi report\r\n   * or do nothing if the embedUrl and accessToken did not update in the new properties\r\n   *\r\n   * @param prevEmbedConfig IReportEmbedConfiguration\r\n   * @returns void\r\n   */\n\n\n  embedOrUpdateReport(prevEmbedConfig) {\n    // Check if Embed URL and Access Token are present in current properties\n    if (!this.embedConfig.accessToken || !this.embedConfig.embedUrl) {\n      return;\n    } // Embed or load in the following scenario\n    // Embed URL is updated (E.g. New report is to be embedded)\n\n\n    if (this.containerRef.nativeElement && this.embedConfig.embedUrl !== prevEmbedConfig.embedUrl) {\n      this.embedReport();\n    }\n  }\n\n}\n\nPowerBIReportEmbedComponent.ɵfac = function PowerBIReportEmbedComponent_Factory(t) {\n  return new (t || PowerBIReportEmbedComponent)();\n};\n\nPowerBIReportEmbedComponent.ɵcmp = /* @__PURE__ */i0.ɵɵdefineComponent({\n  type: PowerBIReportEmbedComponent,\n  selectors: [[\"powerbi-report\", \"embedConfig\", \"\"]],\n  viewQuery: function PowerBIReportEmbedComponent_Query(rf, ctx) {\n    if (rf & 1) {\n      i0.ɵɵviewQuery(_c0, 5);\n    }\n\n    if (rf & 2) {\n      let _t;\n\n      i0.ɵɵqueryRefresh(_t = i0.ɵɵloadQuery()) && (ctx.containerRef = _t.first);\n    }\n  },\n  inputs: {\n    embedConfig: \"embedConfig\",\n    phasedEmbedding: \"phasedEmbedding\",\n    eventHandlers: \"eventHandlers\"\n  },\n  features: [i0.ɵɵInheritDefinitionFeature, i0.ɵɵNgOnChangesFeature],\n  attrs: _c1,\n  decls: 2,\n  vars: 3,\n  consts: [[\"reportContainer\", \"\"]],\n  template: function PowerBIReportEmbedComponent_Template(rf, ctx) {\n    if (rf & 1) {\n      i0.ɵɵelement(0, \"div\", null, 0);\n    }\n\n    if (rf & 2) {\n      i0.ɵɵclassMap(ctx.cssClassName);\n    }\n  },\n  encapsulation: 2\n});\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(PowerBIReportEmbedComponent, [{\n    type: Component,\n    args: [{\n      selector: 'powerbi-report[embedConfig]',\n      template: '<div class={{cssClassName}} #reportContainer></div>'\n    }]\n  }], function () {\n    return [];\n  }, {\n    embedConfig: [{\n      type: Input\n    }],\n    phasedEmbedding: [{\n      type: Input\n    }],\n    eventHandlers: [{\n      type: Input\n    }],\n    containerRef: [{\n      type: ViewChild,\n      args: ['reportContainer']\n    }]\n  });\n})(); // Copyright (c) Microsoft Corporation.\n\n/**\r\n * Dashboard component to embed the dashboard, extends the Base component\r\n */\n\n\nclass PowerBIDashboardEmbedComponent extends PowerBIEmbedComponent {\n  constructor() {\n    super();\n  } // Getter for this._embed\n\n\n  get embed() {\n    return this._embed;\n  } // Setter for this._embed\n\n\n  set embed(newEmbedInstance) {\n    this._embed = newEmbedInstance;\n  } // Returns embed object to calling function\n\n\n  getDashboard() {\n    return this.embed;\n  }\n\n  ngOnInit() {\n    // Initialize PowerBI service instance variable from parent\n    super.ngOnInit();\n  }\n\n  ngOnChanges(changes) {\n    if (changes.embedConfig) {\n      const prevEmbedConfig = changes.embedConfig.previousValue; // Check if the function is being called for the first time\n\n      if (!prevEmbedConfig) {\n        return;\n      } // Input from parent get updated, thus call embedOrUpdateDashboard function\n\n\n      this.embedOrUpdateDashboard(prevEmbedConfig);\n    } // Set event handlers if available\n\n\n    if (this.eventHandlers && this.embed) {\n      super.setEventHandlers(this.embed, this.eventHandlers);\n    }\n  }\n\n  ngAfterViewInit() {\n    // Check if container exists on the UI\n    if (this.containerRef.nativeElement) {\n      // Decide to embed or bootstrap\n      if (this.embedConfig.accessToken && this.embedConfig.embedUrl) {\n        this.embedDashboard();\n      } else {\n        this.embed = this.powerbi.bootstrap(this.containerRef.nativeElement, this.embedConfig);\n      }\n    } // Set event handlers if available\n\n\n    if (this.eventHandlers && this.embed) {\n      super.setEventHandlers(this.embed, this.eventHandlers);\n    }\n  }\n  /**\r\n   * Embed the PowerBI Dashboard\r\n   *\r\n   * @returns void\r\n   */\n\n\n  embedDashboard() {\n    // Check if the HTML container is rendered and available\n    if (!this.containerRef.nativeElement) {\n      return;\n    }\n\n    this.embed = this.powerbi.embed(this.containerRef.nativeElement, this.embedConfig);\n  }\n  /**\r\n   * When component updates, choose to _embed_ the powerbi dashboard\r\n   * or do nothing if the embedUrl and accessToken did not update in the new properties\r\n   *\r\n   * @param prevEmbedConfig IDashboardEmbedConfiguration\r\n   * @returns void\r\n   */\n\n\n  embedOrUpdateDashboard(prevEmbedConfig) {\n    // Check if Embed URL and Access Token are present in current properties\n    if (!this.embedConfig.accessToken || !this.embedConfig.embedUrl) {\n      return;\n    } // Embed in the following scenario\n    // Embed URL is updated (E.g. New dashboard is to be embedded)\n\n\n    if (this.containerRef.nativeElement && this.embedConfig.embedUrl !== prevEmbedConfig.embedUrl) {\n      this.embedDashboard();\n    }\n  }\n\n}\n\nPowerBIDashboardEmbedComponent.ɵfac = function PowerBIDashboardEmbedComponent_Factory(t) {\n  return new (t || PowerBIDashboardEmbedComponent)();\n};\n\nPowerBIDashboardEmbedComponent.ɵcmp = /* @__PURE__ */i0.ɵɵdefineComponent({\n  type: PowerBIDashboardEmbedComponent,\n  selectors: [[\"powerbi-dashboard\", \"embedConfig\", \"\"]],\n  viewQuery: function PowerBIDashboardEmbedComponent_Query(rf, ctx) {\n    if (rf & 1) {\n      i0.ɵɵviewQuery(_c2, 5);\n    }\n\n    if (rf & 2) {\n      let _t;\n\n      i0.ɵɵqueryRefresh(_t = i0.ɵɵloadQuery()) && (ctx.containerRef = _t.first);\n    }\n  },\n  inputs: {\n    embedConfig: \"embedConfig\",\n    eventHandlers: \"eventHandlers\"\n  },\n  features: [i0.ɵɵInheritDefinitionFeature, i0.ɵɵNgOnChangesFeature],\n  attrs: _c1,\n  decls: 2,\n  vars: 3,\n  consts: [[\"dashboardContainer\", \"\"]],\n  template: function PowerBIDashboardEmbedComponent_Template(rf, ctx) {\n    if (rf & 1) {\n      i0.ɵɵelement(0, \"div\", null, 0);\n    }\n\n    if (rf & 2) {\n      i0.ɵɵclassMap(ctx.cssClassName);\n    }\n  },\n  encapsulation: 2\n});\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(PowerBIDashboardEmbedComponent, [{\n    type: Component,\n    args: [{\n      selector: 'powerbi-dashboard[embedConfig]',\n      template: '<div class={{cssClassName}} #dashboardContainer></div>'\n    }]\n  }], function () {\n    return [];\n  }, {\n    embedConfig: [{\n      type: Input\n    }],\n    eventHandlers: [{\n      type: Input\n    }],\n    containerRef: [{\n      type: ViewChild,\n      args: ['dashboardContainer']\n    }]\n  });\n})(); // Copyright (c) Microsoft Corporation.\n\n/**\r\n * Tile component to embed the tile, extends Base component\r\n */\n\n\nclass PowerBITileEmbedComponent extends PowerBIEmbedComponent {\n  constructor() {\n    super();\n  } // Getter for this._embed\n\n\n  get embed() {\n    return this._embed;\n  } // Setter for this._embed\n\n\n  set embed(newEmbedInstance) {\n    this._embed = newEmbedInstance;\n  } // Returns embed object to calling function\n\n\n  getTile() {\n    return this._embed;\n  }\n\n  ngOnInit() {\n    // Initialize PowerBI service instance variable from parent\n    super.ngOnInit();\n  }\n\n  ngOnChanges(changes) {\n    if (changes.embedConfig) {\n      const prevEmbedConfig = changes.embedConfig.previousValue; // Check if the function is being called for the first time\n\n      if (!prevEmbedConfig) {\n        return;\n      } // Input from parent get updated, thus call embedOrUpdateDashboard function\n\n\n      this.embedOrUpdateTile(prevEmbedConfig);\n    } // Set event handlers if available\n\n\n    if (this.eventHandlers && this.embed) {\n      super.setEventHandlers(this.embed, this.eventHandlers);\n    }\n  }\n\n  ngAfterViewInit() {\n    // Check if container exists on the UI\n    if (this.containerRef.nativeElement) {\n      // Decide to embed or bootstrap\n      if (this.embedConfig.accessToken && this.embedConfig.embedUrl) {\n        this.embedTile();\n      } else {\n        this.embed = this.powerbi.bootstrap(this.containerRef.nativeElement, this.embedConfig);\n      }\n    } // Set event handlers if available\n\n\n    if (this.eventHandlers && this.embed) {\n      super.setEventHandlers(this.embed, this.eventHandlers);\n    }\n  }\n  /**\r\n   * Embed the PowerBI Tile\r\n   *\r\n   * @returns void\r\n   */\n\n\n  embedTile() {\n    // Check if the HTML container is rendered and available\n    if (!this.containerRef.nativeElement) {\n      return;\n    }\n\n    this.embed = this.powerbi.embed(this.containerRef.nativeElement, this.embedConfig);\n  }\n  /**\r\n   * When component updates, choose to _embed_ the powerbi tile\r\n   * or do nothing if the embedUrl and accessToken did not update in the new properties\r\n   *\r\n   * @param prevEmbedConfig ITileEmbedConfiguration\r\n   * @returns void\r\n   */\n\n\n  embedOrUpdateTile(prevEmbedConfig) {\n    // Check if Embed URL and Access Token are present in current properties\n    if (!this.embedConfig.accessToken || !this.embedConfig.embedUrl) {\n      return;\n    } // Embed in the following scenario\n    // Embed URL is updated (E.g. New tile is to be embedded)\n\n\n    if (this.containerRef.nativeElement && this.embedConfig.embedUrl !== prevEmbedConfig.embedUrl) {\n      this.embedTile();\n    }\n  }\n\n}\n\nPowerBITileEmbedComponent.ɵfac = function PowerBITileEmbedComponent_Factory(t) {\n  return new (t || PowerBITileEmbedComponent)();\n};\n\nPowerBITileEmbedComponent.ɵcmp = /* @__PURE__ */i0.ɵɵdefineComponent({\n  type: PowerBITileEmbedComponent,\n  selectors: [[\"powerbi-tile\", \"embedConfig\", \"\"]],\n  viewQuery: function PowerBITileEmbedComponent_Query(rf, ctx) {\n    if (rf & 1) {\n      i0.ɵɵviewQuery(_c3, 5);\n    }\n\n    if (rf & 2) {\n      let _t;\n\n      i0.ɵɵqueryRefresh(_t = i0.ɵɵloadQuery()) && (ctx.containerRef = _t.first);\n    }\n  },\n  inputs: {\n    embedConfig: \"embedConfig\",\n    eventHandlers: \"eventHandlers\"\n  },\n  features: [i0.ɵɵInheritDefinitionFeature, i0.ɵɵNgOnChangesFeature],\n  attrs: _c1,\n  decls: 2,\n  vars: 3,\n  consts: [[\"tileContainer\", \"\"]],\n  template: function PowerBITileEmbedComponent_Template(rf, ctx) {\n    if (rf & 1) {\n      i0.ɵɵelement(0, \"div\", null, 0);\n    }\n\n    if (rf & 2) {\n      i0.ɵɵclassMap(ctx.cssClassName);\n    }\n  },\n  encapsulation: 2\n});\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(PowerBITileEmbedComponent, [{\n    type: Component,\n    args: [{\n      selector: 'powerbi-tile[embedConfig]',\n      template: '<div class={{cssClassName}} #tileContainer></div>'\n    }]\n  }], function () {\n    return [];\n  }, {\n    embedConfig: [{\n      type: Input\n    }],\n    eventHandlers: [{\n      type: Input\n    }],\n    containerRef: [{\n      type: ViewChild,\n      args: ['tileContainer']\n    }]\n  });\n})(); // Copyright (c) Microsoft Corporation.\n\n/**\r\n * Paginated report component to embed the entity, extends the Base component\r\n */\n\n\nclass PowerBIPaginatedReportEmbedComponent extends PowerBIEmbedComponent {\n  constructor() {\n    super();\n  } // Getter for this._embed\n\n\n  get embed() {\n    return this._embed;\n  } // Setter for this._embed\n\n\n  set embed(newEmbedInstance) {\n    this._embed = newEmbedInstance;\n  }\n\n  ngOnInit() {\n    // Initialize PowerBI service instance variable from parent\n    super.ngOnInit();\n  }\n\n  ngOnChanges(changes) {\n    if (changes.embedConfig) {\n      const prevEmbedConfig = changes.embedConfig.previousValue; // Check if the function is being called for the first time\n\n      if (!prevEmbedConfig) {\n        return;\n      } // Input from parent get updated, thus call embedOrUpdateDashboard function\n\n\n      this.embedOrUpdatedPaginatedReport(prevEmbedConfig);\n    }\n  }\n\n  ngAfterViewInit() {\n    // Check if container exists on the UI\n    if (this.containerRef.nativeElement) {\n      // Decide to embed\n      this.embedPaginatedReport();\n    }\n  }\n  /**\r\n   * Embed the PowerBI Paginated report\r\n   *\r\n   * @returns void\r\n   */\n\n\n  embedPaginatedReport() {\n    // Check if the HTML container is rendered and available\n    if (!this.containerRef.nativeElement) {\n      return;\n    } // Embed paginated report\n\n\n    this.embed = this.powerbi.embed(this.containerRef.nativeElement, this.embedConfig);\n  }\n  /**\r\n   * When component updates, choose to _embed_ the powerbi paginated report\r\n   * or do nothing if the embedUrl and accessToken did not update in the new properties\r\n   *\r\n   * @param prevEmbedConfig IEmbedConfiguration\r\n   * @returns void\r\n   */\n\n\n  embedOrUpdatedPaginatedReport(prevEmbedConfig) {\n    // Check if Embed URL and Access Token are present in current properties\n    if (!this.embedConfig.accessToken || !this.embedConfig.embedUrl) {\n      return;\n    } // Embed in the following scenario\n    // Embed URL is updated (E.g. New paginated report is to be embedded)\n\n\n    if (this.containerRef.nativeElement && this.embedConfig.embedUrl !== prevEmbedConfig.embedUrl) {\n      this.embedPaginatedReport();\n    }\n  }\n\n}\n\nPowerBIPaginatedReportEmbedComponent.ɵfac = function PowerBIPaginatedReportEmbedComponent_Factory(t) {\n  return new (t || PowerBIPaginatedReportEmbedComponent)();\n};\n\nPowerBIPaginatedReportEmbedComponent.ɵcmp = /* @__PURE__ */i0.ɵɵdefineComponent({\n  type: PowerBIPaginatedReportEmbedComponent,\n  selectors: [[\"powerbi-paginated-report\", \"embedConfig\", \"\"]],\n  viewQuery: function PowerBIPaginatedReportEmbedComponent_Query(rf, ctx) {\n    if (rf & 1) {\n      i0.ɵɵviewQuery(_c4, 5);\n    }\n\n    if (rf & 2) {\n      let _t;\n\n      i0.ɵɵqueryRefresh(_t = i0.ɵɵloadQuery()) && (ctx.containerRef = _t.first);\n    }\n  },\n  inputs: {\n    embedConfig: \"embedConfig\"\n  },\n  features: [i0.ɵɵInheritDefinitionFeature, i0.ɵɵNgOnChangesFeature],\n  attrs: _c1,\n  decls: 2,\n  vars: 3,\n  consts: [[\"paginatedReportContainer\", \"\"]],\n  template: function PowerBIPaginatedReportEmbedComponent_Template(rf, ctx) {\n    if (rf & 1) {\n      i0.ɵɵelement(0, \"div\", null, 0);\n    }\n\n    if (rf & 2) {\n      i0.ɵɵclassMap(ctx.cssClassName);\n    }\n  },\n  encapsulation: 2\n});\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(PowerBIPaginatedReportEmbedComponent, [{\n    type: Component,\n    args: [{\n      selector: 'powerbi-paginated-report[embedConfig]',\n      template: '<div class={{cssClassName}} #paginatedReportContainer></div>'\n    }]\n  }], function () {\n    return [];\n  }, {\n    embedConfig: [{\n      type: Input\n    }],\n    containerRef: [{\n      type: ViewChild,\n      args: ['paginatedReportContainer']\n    }]\n  });\n})(); // Copyright (c) Microsoft Corporation.\n\n/**\r\n * Visual component to embed the visual, extends Base component\r\n */\n\n\nclass PowerBIVisualEmbedComponent extends PowerBIEmbedComponent {\n  constructor() {\n    super();\n  } // Getter for this._embed\n\n\n  get embed() {\n    return this._embed;\n  } // Setter for this._embed\n\n\n  set embed(newEmbedInstance) {\n    this._embed = newEmbedInstance;\n  } // Returns embed object to calling function\n\n\n  getVisual() {\n    return this._embed;\n  }\n\n  ngOnInit() {\n    // Initialize PowerBI service instance variable from parent\n    super.ngOnInit();\n  }\n\n  ngOnChanges(changes) {\n    if (changes.embedConfig) {\n      const prevEmbedConfig = changes.embedConfig.previousValue; // Check if the function is being called for the first time\n\n      if (!prevEmbedConfig) {\n        return;\n      } // Input from parent get updated, thus call embedOrUpdateDashboard function\n\n\n      this.embedOrUpdateVisual(prevEmbedConfig);\n    } // Set event handlers if available\n\n\n    if (this.eventHandlers && this.embed) {\n      super.setEventHandlers(this.embed, this.eventHandlers);\n    }\n  }\n\n  ngAfterViewInit() {\n    // Check if container exists on the UI\n    if (this.containerRef.nativeElement) {\n      // Decide to embed or bootstrap\n      if (this.embedConfig.accessToken && this.embedConfig.embedUrl) {\n        this.embedVisual();\n      } else {\n        this.embed = this.powerbi.bootstrap(this.containerRef.nativeElement, this.embedConfig);\n      }\n    } // Set event handlers if available\n\n\n    if (this.eventHandlers && this.embed) {\n      super.setEventHandlers(this.embed, this.eventHandlers);\n    }\n  }\n  /**\r\n   * Embed the PowerBI Visual\r\n   *\r\n   * @returns void\r\n   */\n\n\n  embedVisual() {\n    // Check if the HTML container is rendered and available\n    if (!this.containerRef.nativeElement) {\n      return;\n    }\n\n    this.embed = this.powerbi.embed(this.containerRef.nativeElement, this.embedConfig);\n  }\n  /**\r\n   * When component updates, choose to _embed_ the powerbi visual\r\n   * or do nothing if the embedUrl and accessToken did not update in the new properties\r\n   *\r\n   * @param prevEmbedConfig IVisualEmbedConfiguration\r\n   * @returns void\r\n   */\n\n\n  embedOrUpdateVisual(prevEmbedConfig) {\n    // Check if Embed URL and Access Token are present in current properties\n    if (!this.embedConfig.accessToken || !this.embedConfig.embedUrl) {\n      return;\n    } // Embed in the following scenario\n    // Embed URL is updated (E.g. New visual is to be embedded)\n\n\n    if (this.containerRef.nativeElement && this.embedConfig.embedUrl !== prevEmbedConfig.embedUrl) {\n      this.embedVisual();\n    }\n  }\n\n}\n\nPowerBIVisualEmbedComponent.ɵfac = function PowerBIVisualEmbedComponent_Factory(t) {\n  return new (t || PowerBIVisualEmbedComponent)();\n};\n\nPowerBIVisualEmbedComponent.ɵcmp = /* @__PURE__ */i0.ɵɵdefineComponent({\n  type: PowerBIVisualEmbedComponent,\n  selectors: [[\"powerbi-visual\", \"embedConfig\", \"\"]],\n  viewQuery: function PowerBIVisualEmbedComponent_Query(rf, ctx) {\n    if (rf & 1) {\n      i0.ɵɵviewQuery(_c5, 5);\n    }\n\n    if (rf & 2) {\n      let _t;\n\n      i0.ɵɵqueryRefresh(_t = i0.ɵɵloadQuery()) && (ctx.containerRef = _t.first);\n    }\n  },\n  inputs: {\n    embedConfig: \"embedConfig\",\n    eventHandlers: \"eventHandlers\"\n  },\n  features: [i0.ɵɵInheritDefinitionFeature, i0.ɵɵNgOnChangesFeature],\n  attrs: _c1,\n  decls: 2,\n  vars: 3,\n  consts: [[\"visualContainer\", \"\"]],\n  template: function PowerBIVisualEmbedComponent_Template(rf, ctx) {\n    if (rf & 1) {\n      i0.ɵɵelement(0, \"div\", null, 0);\n    }\n\n    if (rf & 2) {\n      i0.ɵɵclassMap(ctx.cssClassName);\n    }\n  },\n  encapsulation: 2\n});\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(PowerBIVisualEmbedComponent, [{\n    type: Component,\n    args: [{\n      selector: 'powerbi-visual[embedConfig]',\n      template: '<div class={{cssClassName}} #visualContainer></div>'\n    }]\n  }], function () {\n    return [];\n  }, {\n    embedConfig: [{\n      type: Input\n    }],\n    eventHandlers: [{\n      type: Input\n    }],\n    containerRef: [{\n      type: ViewChild,\n      args: ['visualContainer']\n    }]\n  });\n})(); // Copyright (c) Microsoft Corporation.\n\n/**\r\n * Qna component to embed the Qna visual, extends Base component\r\n */\n\n\nclass PowerBIQnaEmbedComponent extends PowerBIEmbedComponent {\n  constructor() {\n    super();\n  } // Getter for this._embed\n\n\n  get embed() {\n    return this._embed;\n  } // Setter for this._embed\n\n\n  set embed(newEmbedInstance) {\n    this._embed = newEmbedInstance;\n  } // Returns embed object to calling function\n\n\n  getQna() {\n    return this._embed;\n  }\n\n  ngOnInit() {\n    // Initialize PowerBI service instance variable from parent\n    super.ngOnInit();\n  }\n\n  ngOnChanges(changes) {\n    if (changes.embedConfig) {\n      const prevEmbedConfig = changes.embedConfig.previousValue; // Check if the function is being called for the first time\n\n      if (!prevEmbedConfig) {\n        return;\n      } // Input from parent get updated, thus call embedOrUpdateDashboard function\n\n\n      this.embedOrUpdateQna(prevEmbedConfig);\n    } // Set event handlers if available\n\n\n    if (this.eventHandlers && this.embed) {\n      super.setEventHandlers(this.embed, this.eventHandlers);\n    }\n  }\n\n  ngAfterViewInit() {\n    // Check if container exists on the UI\n    if (this.containerRef.nativeElement) {\n      // Decide to embed or bootstrap\n      if (this.embedConfig.accessToken && this.embedConfig.embedUrl) {\n        this.embedQnaVisual();\n      } else {\n        this.embed = this.powerbi.bootstrap(this.containerRef.nativeElement, this.embedConfig);\n      }\n    } // Set event handlers if available\n\n\n    if (this.eventHandlers && this.embed) {\n      super.setEventHandlers(this.embed, this.eventHandlers);\n    }\n  }\n  /**\r\n   * Embed the PowerBI QnA Visual\r\n   *\r\n   * @returns void\r\n   */\n\n\n  embedQnaVisual() {\n    // Check if the HTML container is rendered and available\n    if (!this.containerRef.nativeElement) {\n      return;\n    }\n\n    this.embed = this.powerbi.embed(this.containerRef.nativeElement, this.embedConfig);\n  }\n  /**\r\n   * When component updates, choose to _embed_ the powerbi qna visual\r\n   * or do nothing if the embedUrl and accessToken did not update in the new properties\r\n   *\r\n   * @param prevEmbedConfig IQnaEmbedConfiguration\r\n   * @returns void\r\n   */\n\n\n  embedOrUpdateQna(prevEmbedConfig) {\n    // Check if Embed URL and Access Token are present in current properties\n    if (!this.embedConfig.accessToken || !this.embedConfig.embedUrl) {\n      return;\n    } // Embed in the following scenario\n    // Embed URL is updated (E.g. New Qna visual is to be embedded)\n\n\n    if (this.containerRef.nativeElement && this.embedConfig.embedUrl !== prevEmbedConfig.embedUrl) {\n      this.embedQnaVisual();\n    }\n  }\n\n}\n\nPowerBIQnaEmbedComponent.ɵfac = function PowerBIQnaEmbedComponent_Factory(t) {\n  return new (t || PowerBIQnaEmbedComponent)();\n};\n\nPowerBIQnaEmbedComponent.ɵcmp = /* @__PURE__ */i0.ɵɵdefineComponent({\n  type: PowerBIQnaEmbedComponent,\n  selectors: [[\"powerbi-qna\", \"embedConfig\", \"\"]],\n  viewQuery: function PowerBIQnaEmbedComponent_Query(rf, ctx) {\n    if (rf & 1) {\n      i0.ɵɵviewQuery(_c6, 5);\n    }\n\n    if (rf & 2) {\n      let _t;\n\n      i0.ɵɵqueryRefresh(_t = i0.ɵɵloadQuery()) && (ctx.containerRef = _t.first);\n    }\n  },\n  inputs: {\n    embedConfig: \"embedConfig\",\n    eventHandlers: \"eventHandlers\"\n  },\n  features: [i0.ɵɵInheritDefinitionFeature, i0.ɵɵNgOnChangesFeature],\n  attrs: _c1,\n  decls: 2,\n  vars: 3,\n  consts: [[\"qnaContainer\", \"\"]],\n  template: function PowerBIQnaEmbedComponent_Template(rf, ctx) {\n    if (rf & 1) {\n      i0.ɵɵelement(0, \"div\", null, 0);\n    }\n\n    if (rf & 2) {\n      i0.ɵɵclassMap(ctx.cssClassName);\n    }\n  },\n  encapsulation: 2\n});\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(PowerBIQnaEmbedComponent, [{\n    type: Component,\n    args: [{\n      selector: 'powerbi-qna[embedConfig]',\n      template: '<div class={{cssClassName}} #qnaContainer></div>'\n    }]\n  }], function () {\n    return [];\n  }, {\n    embedConfig: [{\n      type: Input\n    }],\n    eventHandlers: [{\n      type: Input\n    }],\n    containerRef: [{\n      type: ViewChild,\n      args: ['qnaContainer']\n    }]\n  });\n})(); // Copyright (c) Microsoft Corporation.\n\n\nclass PowerBIEmbedModule {}\n\nPowerBIEmbedModule.ɵfac = function PowerBIEmbedModule_Factory(t) {\n  return new (t || PowerBIEmbedModule)();\n};\n\nPowerBIEmbedModule.ɵmod = /* @__PURE__ */i0.ɵɵdefineNgModule({\n  type: PowerBIEmbedModule\n});\nPowerBIEmbedModule.ɵinj = /* @__PURE__ */i0.ɵɵdefineInjector({\n  imports: [[]]\n});\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(PowerBIEmbedModule, [{\n    type: NgModule,\n    args: [{\n      declarations: [PowerBIDashboardEmbedComponent, PowerBIPaginatedReportEmbedComponent, PowerBIQnaEmbedComponent, PowerBIReportEmbedComponent, PowerBITileEmbedComponent, PowerBIVisualEmbedComponent],\n      imports: [],\n      exports: [PowerBIDashboardEmbedComponent, PowerBIPaginatedReportEmbedComponent, PowerBIQnaEmbedComponent, PowerBIReportEmbedComponent, PowerBITileEmbedComponent, PowerBIVisualEmbedComponent]\n    }]\n  }], null, null);\n})(); // Copyright (c) Microsoft Corporation.\n\n/**\r\n * Generated bundle index. Do not edit.\r\n */\n\n\nexport { PowerBIDashboardEmbedComponent, PowerBIEmbedModule, PowerBIPaginatedReportEmbedComponent, PowerBIQnaEmbedComponent, PowerBIReportEmbedComponent, PowerBITileEmbedComponent, PowerBIVisualEmbedComponent };","map":{"version":3,"sources":["C:/xampp/htdocs/ProyectoAngular/PowerBi-Angular/powerbi-client-angular/Angular/node_modules/powerbi-client-angular/fesm2015/powerbi-client-angular.js"],"names":["i0","Component","Input","ViewChild","NgModule","service","factories","stringifyMap","map","mapEntries","Array","from","JSON","stringify","mapEntry","toString","PowerBIEmbedComponent","constructor","prevEventHandlerMapString","ngOnInit","powerbi","Service","hpmFactory","wpmpFactory","routerFactory","setEventHandlers","embed","eventHandlerMap","eventHandlerMapString","forEach","eventHandlerMethod","eventName","off","on","event","ɵfac","ɵcmp","type","args","selector","template","cssClassName","PowerBIReportEmbedComponent","phasedEmbedding","_embed","newEmbedInstance","getReport","ngOnChanges","changes","embedConfig","prevEmbedConfig","previousValue","embedOrUpdateReport","eventHandlers","ngAfterViewInit","containerRef","nativeElement","accessToken","embedUrl","embedReport","bootstrap","load","PowerBIDashboardEmbedComponent","getDashboard","embedOrUpdateDashboard","embedDashboard","PowerBITileEmbedComponent","getTile","embedOrUpdateTile","embedTile","PowerBIPaginatedReportEmbedComponent","embedOrUpdatedPaginatedReport","embedPaginatedReport","PowerBIVisualEmbedComponent","getVisual","embedOrUpdateVisual","embedVisual","PowerBIQnaEmbedComponent","getQna","embedOrUpdateQna","embedQnaVisual","PowerBIEmbedModule","ɵmod","ɵinj","declarations","imports","exports"],"mappings":"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","sourcesContent":["import * as i0 from '@angular/core';\nimport { Component, Input, ViewChild, NgModule } from '@angular/core';\nimport { service, factories } from 'powerbi-client';\n\n// Copyright (c) Microsoft Corporation.\r\n// Licensed under the MIT License.\r\n/**\r\n * Get JSON string representation of the given map.\r\n *\r\n * @param map Map of event and corresponding handler method\r\n *\r\n */\r\nconst stringifyMap = (map) => {\r\n    // Return empty string for empty/null map\r\n    if (!map) {\r\n        return '';\r\n    }\r\n    // Get entries of map as array\r\n    const mapEntries = Array.from(map);\r\n    // Return JSON string\r\n    return JSON.stringify(mapEntries.map((mapEntry) => \r\n    // Convert event handler method to a string containing its source code for comparison\r\n    [mapEntry[0], mapEntry[1] ? mapEntry[1].toString() : '']));\r\n};\n\n// Copyright (c) Microsoft Corporation.\r\n/**\r\n * Base component to hold common properties for all the Power BI entities\r\n */\r\nclass PowerBIEmbedComponent {\r\n    constructor() {\r\n        // JSON stringify of prev event handler map\r\n        this.prevEventHandlerMapString = '';\r\n    }\r\n    ngOnInit() {\r\n        // Initialize powerbi variable for child component\r\n        if (this.service) {\r\n            this.powerbi = this.service;\r\n        }\r\n        else {\r\n            this.powerbi = new service.Service(factories.hpmFactory, factories.wpmpFactory, factories.routerFactory);\r\n        }\r\n    }\r\n    /**\r\n     * Sets all event handlers from the input on the embedded entity\r\n     *\r\n     * @param embed Embedded object\r\n     * @param eventHandlerMap Array of event handlers to be set on embedded entity\r\n     * @returns void\r\n     */\r\n    setEventHandlers(embed, eventHandlerMap) {\r\n        // Get string representation of eventHandlerMap\r\n        const eventHandlerMapString = stringifyMap(eventHandlerMap);\r\n        // Check if event handler map changed\r\n        if (this.prevEventHandlerMapString === eventHandlerMapString) {\r\n            return;\r\n        }\r\n        // Update prev string representation of event handler map\r\n        this.prevEventHandlerMapString = eventHandlerMapString;\r\n        // Apply all provided event handlers\r\n        eventHandlerMap.forEach((eventHandlerMethod, eventName) => {\r\n            // Removes event handler for this event\r\n            embed.off(eventName);\r\n            // Event handler is effectively removed for this event when eventHandlerMethod is null\r\n            if (eventHandlerMethod) {\r\n                // Set single event handler\r\n                embed.on(eventName, (event) => {\r\n                    eventHandlerMethod(event, embed);\r\n                });\r\n            }\r\n        });\r\n    }\r\n}\r\nPowerBIEmbedComponent.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"12.0.5\", ngImport: i0, type: PowerBIEmbedComponent, deps: [], target: i0.ɵɵFactoryTarget.Component });\r\nPowerBIEmbedComponent.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: \"12.0.0\", version: \"12.0.5\", type: PowerBIEmbedComponent, selector: \"powerbi-embed\", inputs: { cssClassName: \"cssClassName\", service: \"service\" }, ngImport: i0, template: '', isInline: true });\r\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"12.0.5\", ngImport: i0, type: PowerBIEmbedComponent, decorators: [{\r\n            type: Component,\r\n            args: [{\r\n                    selector: 'powerbi-embed',\r\n                    template: '',\r\n                }]\r\n        }], propDecorators: { cssClassName: [{\r\n                type: Input\r\n            }], service: [{\r\n                type: Input\r\n            }] } });\n\n// Copyright (c) Microsoft Corporation.\r\n/**\r\n * Report component to embed the report, extends the Base Component\r\n */\r\nclass PowerBIReportEmbedComponent extends PowerBIEmbedComponent {\r\n    constructor() {\r\n        super();\r\n        // Phased embedding flag (Optional)\r\n        this.phasedEmbedding = false;\r\n    }\r\n    // Getter for this._embed\r\n    get embed() {\r\n        return this._embed;\r\n    }\r\n    // Setter for this._embed\r\n    set embed(newEmbedInstance) {\r\n        this._embed = newEmbedInstance;\r\n    }\r\n    // Returns embed object to calling function\r\n    getReport() {\r\n        return this._embed;\r\n    }\r\n    ngOnInit() {\r\n        // Initialize PowerBI service instance variable from parent\r\n        super.ngOnInit();\r\n    }\r\n    ngOnChanges(changes) {\r\n        if (changes.embedConfig) {\r\n            const prevEmbedConfig = changes.embedConfig.previousValue;\r\n            // Check if the function is being called for the first time\r\n            if (!prevEmbedConfig) {\r\n                return;\r\n            }\r\n            // Input from parent get updated, thus call embedOrUpdateReport function\r\n            this.embedOrUpdateReport(prevEmbedConfig);\r\n        }\r\n        // Set event handlers if available\r\n        if (this.eventHandlers && this.embed) {\r\n            super.setEventHandlers(this.embed, this.eventHandlers);\r\n        }\r\n    }\r\n    ngAfterViewInit() {\r\n        // Check if container exists on the UI\r\n        if (this.containerRef.nativeElement) {\r\n            // Decide to embed, load or bootstrap\r\n            if (this.embedConfig.accessToken && this.embedConfig.embedUrl) {\r\n                this.embedReport();\r\n            }\r\n            else {\r\n                this.embed = this.powerbi.bootstrap(this.containerRef.nativeElement, this.embedConfig);\r\n            }\r\n        }\r\n        // Set event handlers if available\r\n        if (this.eventHandlers && this.embed) {\r\n            super.setEventHandlers(this.embed, this.eventHandlers);\r\n        }\r\n    }\r\n    /**\r\n     * Embed or load the PowerBI Report based on phasedEmbedding flag\r\n     *\r\n     * @returns void\r\n     */\r\n    embedReport() {\r\n        // Check if the HTML container is rendered and available\r\n        if (!this.containerRef.nativeElement) {\r\n            return;\r\n        }\r\n        // Load when phasedEmbedding flag is true, embed otherwise\r\n        if (this.phasedEmbedding) {\r\n            this.embed = this.powerbi.load(this.containerRef.nativeElement, this.embedConfig);\r\n        }\r\n        else {\r\n            this.embed = this.powerbi.embed(this.containerRef.nativeElement, this.embedConfig);\r\n        }\r\n    }\r\n    /**\r\n     * When component updates, choose to _embed_ or _load_ the powerbi report\r\n     * or do nothing if the embedUrl and accessToken did not update in the new properties\r\n     *\r\n     * @param prevEmbedConfig IReportEmbedConfiguration\r\n     * @returns void\r\n     */\r\n    embedOrUpdateReport(prevEmbedConfig) {\r\n        // Check if Embed URL and Access Token are present in current properties\r\n        if (!this.embedConfig.accessToken || !this.embedConfig.embedUrl) {\r\n            return;\r\n        }\r\n        // Embed or load in the following scenario\r\n        // Embed URL is updated (E.g. New report is to be embedded)\r\n        if (this.containerRef.nativeElement && this.embedConfig.embedUrl !== prevEmbedConfig.embedUrl) {\r\n            this.embedReport();\r\n        }\r\n    }\r\n}\r\nPowerBIReportEmbedComponent.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"12.0.5\", ngImport: i0, type: PowerBIReportEmbedComponent, deps: [], target: i0.ɵɵFactoryTarget.Component });\r\nPowerBIReportEmbedComponent.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: \"12.0.0\", version: \"12.0.5\", type: PowerBIReportEmbedComponent, selector: \"powerbi-report[embedConfig]\", inputs: { embedConfig: \"embedConfig\", phasedEmbedding: \"phasedEmbedding\", eventHandlers: \"eventHandlers\" }, viewQueries: [{ propertyName: \"containerRef\", first: true, predicate: [\"reportContainer\"], descendants: true }], usesInheritance: true, usesOnChanges: true, ngImport: i0, template: '<div class={{cssClassName}} #reportContainer></div>', isInline: true });\r\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"12.0.5\", ngImport: i0, type: PowerBIReportEmbedComponent, decorators: [{\r\n            type: Component,\r\n            args: [{\r\n                    selector: 'powerbi-report[embedConfig]',\r\n                    template: '<div class={{cssClassName}} #reportContainer></div>',\r\n                }]\r\n        }], ctorParameters: function () { return []; }, propDecorators: { embedConfig: [{\r\n                type: Input\r\n            }], phasedEmbedding: [{\r\n                type: Input\r\n            }], eventHandlers: [{\r\n                type: Input\r\n            }], containerRef: [{\r\n                type: ViewChild,\r\n                args: ['reportContainer']\r\n            }] } });\n\n// Copyright (c) Microsoft Corporation.\r\n/**\r\n * Dashboard component to embed the dashboard, extends the Base component\r\n */\r\nclass PowerBIDashboardEmbedComponent extends PowerBIEmbedComponent {\r\n    constructor() {\r\n        super();\r\n    }\r\n    // Getter for this._embed\r\n    get embed() {\r\n        return this._embed;\r\n    }\r\n    // Setter for this._embed\r\n    set embed(newEmbedInstance) {\r\n        this._embed = newEmbedInstance;\r\n    }\r\n    // Returns embed object to calling function\r\n    getDashboard() {\r\n        return this.embed;\r\n    }\r\n    ngOnInit() {\r\n        // Initialize PowerBI service instance variable from parent\r\n        super.ngOnInit();\r\n    }\r\n    ngOnChanges(changes) {\r\n        if (changes.embedConfig) {\r\n            const prevEmbedConfig = changes.embedConfig.previousValue;\r\n            // Check if the function is being called for the first time\r\n            if (!prevEmbedConfig) {\r\n                return;\r\n            }\r\n            // Input from parent get updated, thus call embedOrUpdateDashboard function\r\n            this.embedOrUpdateDashboard(prevEmbedConfig);\r\n        }\r\n        // Set event handlers if available\r\n        if (this.eventHandlers && this.embed) {\r\n            super.setEventHandlers(this.embed, this.eventHandlers);\r\n        }\r\n    }\r\n    ngAfterViewInit() {\r\n        // Check if container exists on the UI\r\n        if (this.containerRef.nativeElement) {\r\n            // Decide to embed or bootstrap\r\n            if (this.embedConfig.accessToken && this.embedConfig.embedUrl) {\r\n                this.embedDashboard();\r\n            }\r\n            else {\r\n                this.embed = this.powerbi.bootstrap(this.containerRef.nativeElement, this.embedConfig);\r\n            }\r\n        }\r\n        // Set event handlers if available\r\n        if (this.eventHandlers && this.embed) {\r\n            super.setEventHandlers(this.embed, this.eventHandlers);\r\n        }\r\n    }\r\n    /**\r\n     * Embed the PowerBI Dashboard\r\n     *\r\n     * @returns void\r\n     */\r\n    embedDashboard() {\r\n        // Check if the HTML container is rendered and available\r\n        if (!this.containerRef.nativeElement) {\r\n            return;\r\n        }\r\n        this.embed = this.powerbi.embed(this.containerRef.nativeElement, this.embedConfig);\r\n    }\r\n    /**\r\n     * When component updates, choose to _embed_ the powerbi dashboard\r\n     * or do nothing if the embedUrl and accessToken did not update in the new properties\r\n     *\r\n     * @param prevEmbedConfig IDashboardEmbedConfiguration\r\n     * @returns void\r\n     */\r\n    embedOrUpdateDashboard(prevEmbedConfig) {\r\n        // Check if Embed URL and Access Token are present in current properties\r\n        if (!this.embedConfig.accessToken || !this.embedConfig.embedUrl) {\r\n            return;\r\n        }\r\n        // Embed in the following scenario\r\n        // Embed URL is updated (E.g. New dashboard is to be embedded)\r\n        if (this.containerRef.nativeElement && this.embedConfig.embedUrl !== prevEmbedConfig.embedUrl) {\r\n            this.embedDashboard();\r\n        }\r\n    }\r\n}\r\nPowerBIDashboardEmbedComponent.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"12.0.5\", ngImport: i0, type: PowerBIDashboardEmbedComponent, deps: [], target: i0.ɵɵFactoryTarget.Component });\r\nPowerBIDashboardEmbedComponent.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: \"12.0.0\", version: \"12.0.5\", type: PowerBIDashboardEmbedComponent, selector: \"powerbi-dashboard[embedConfig]\", inputs: { embedConfig: \"embedConfig\", eventHandlers: \"eventHandlers\" }, viewQueries: [{ propertyName: \"containerRef\", first: true, predicate: [\"dashboardContainer\"], descendants: true }], usesInheritance: true, usesOnChanges: true, ngImport: i0, template: '<div class={{cssClassName}} #dashboardContainer></div>', isInline: true });\r\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"12.0.5\", ngImport: i0, type: PowerBIDashboardEmbedComponent, decorators: [{\r\n            type: Component,\r\n            args: [{\r\n                    selector: 'powerbi-dashboard[embedConfig]',\r\n                    template: '<div class={{cssClassName}} #dashboardContainer></div>',\r\n                }]\r\n        }], ctorParameters: function () { return []; }, propDecorators: { embedConfig: [{\r\n                type: Input\r\n            }], eventHandlers: [{\r\n                type: Input\r\n            }], containerRef: [{\r\n                type: ViewChild,\r\n                args: ['dashboardContainer']\r\n            }] } });\n\n// Copyright (c) Microsoft Corporation.\r\n/**\r\n * Tile component to embed the tile, extends Base component\r\n */\r\nclass PowerBITileEmbedComponent extends PowerBIEmbedComponent {\r\n    constructor() {\r\n        super();\r\n    }\r\n    // Getter for this._embed\r\n    get embed() {\r\n        return this._embed;\r\n    }\r\n    // Setter for this._embed\r\n    set embed(newEmbedInstance) {\r\n        this._embed = newEmbedInstance;\r\n    }\r\n    // Returns embed object to calling function\r\n    getTile() {\r\n        return this._embed;\r\n    }\r\n    ngOnInit() {\r\n        // Initialize PowerBI service instance variable from parent\r\n        super.ngOnInit();\r\n    }\r\n    ngOnChanges(changes) {\r\n        if (changes.embedConfig) {\r\n            const prevEmbedConfig = changes.embedConfig.previousValue;\r\n            // Check if the function is being called for the first time\r\n            if (!prevEmbedConfig) {\r\n                return;\r\n            }\r\n            // Input from parent get updated, thus call embedOrUpdateDashboard function\r\n            this.embedOrUpdateTile(prevEmbedConfig);\r\n        }\r\n        // Set event handlers if available\r\n        if (this.eventHandlers && this.embed) {\r\n            super.setEventHandlers(this.embed, this.eventHandlers);\r\n        }\r\n    }\r\n    ngAfterViewInit() {\r\n        // Check if container exists on the UI\r\n        if (this.containerRef.nativeElement) {\r\n            // Decide to embed or bootstrap\r\n            if (this.embedConfig.accessToken && this.embedConfig.embedUrl) {\r\n                this.embedTile();\r\n            }\r\n            else {\r\n                this.embed = this.powerbi.bootstrap(this.containerRef.nativeElement, this.embedConfig);\r\n            }\r\n        }\r\n        // Set event handlers if available\r\n        if (this.eventHandlers && this.embed) {\r\n            super.setEventHandlers(this.embed, this.eventHandlers);\r\n        }\r\n    }\r\n    /**\r\n     * Embed the PowerBI Tile\r\n     *\r\n     * @returns void\r\n     */\r\n    embedTile() {\r\n        // Check if the HTML container is rendered and available\r\n        if (!this.containerRef.nativeElement) {\r\n            return;\r\n        }\r\n        this.embed = this.powerbi.embed(this.containerRef.nativeElement, this.embedConfig);\r\n    }\r\n    /**\r\n     * When component updates, choose to _embed_ the powerbi tile\r\n     * or do nothing if the embedUrl and accessToken did not update in the new properties\r\n     *\r\n     * @param prevEmbedConfig ITileEmbedConfiguration\r\n     * @returns void\r\n     */\r\n    embedOrUpdateTile(prevEmbedConfig) {\r\n        // Check if Embed URL and Access Token are present in current properties\r\n        if (!this.embedConfig.accessToken || !this.embedConfig.embedUrl) {\r\n            return;\r\n        }\r\n        // Embed in the following scenario\r\n        // Embed URL is updated (E.g. New tile is to be embedded)\r\n        if (this.containerRef.nativeElement && this.embedConfig.embedUrl !== prevEmbedConfig.embedUrl) {\r\n            this.embedTile();\r\n        }\r\n    }\r\n}\r\nPowerBITileEmbedComponent.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"12.0.5\", ngImport: i0, type: PowerBITileEmbedComponent, deps: [], target: i0.ɵɵFactoryTarget.Component });\r\nPowerBITileEmbedComponent.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: \"12.0.0\", version: \"12.0.5\", type: PowerBITileEmbedComponent, selector: \"powerbi-tile[embedConfig]\", inputs: { embedConfig: \"embedConfig\", eventHandlers: \"eventHandlers\" }, viewQueries: [{ propertyName: \"containerRef\", first: true, predicate: [\"tileContainer\"], descendants: true }], usesInheritance: true, usesOnChanges: true, ngImport: i0, template: '<div class={{cssClassName}} #tileContainer></div>', isInline: true });\r\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"12.0.5\", ngImport: i0, type: PowerBITileEmbedComponent, decorators: [{\r\n            type: Component,\r\n            args: [{\r\n                    selector: 'powerbi-tile[embedConfig]',\r\n                    template: '<div class={{cssClassName}} #tileContainer></div>',\r\n                }]\r\n        }], ctorParameters: function () { return []; }, propDecorators: { embedConfig: [{\r\n                type: Input\r\n            }], eventHandlers: [{\r\n                type: Input\r\n            }], containerRef: [{\r\n                type: ViewChild,\r\n                args: ['tileContainer']\r\n            }] } });\n\n// Copyright (c) Microsoft Corporation.\r\n/**\r\n * Paginated report component to embed the entity, extends the Base component\r\n */\r\nclass PowerBIPaginatedReportEmbedComponent extends PowerBIEmbedComponent {\r\n    constructor() {\r\n        super();\r\n    }\r\n    // Getter for this._embed\r\n    get embed() {\r\n        return this._embed;\r\n    }\r\n    // Setter for this._embed\r\n    set embed(newEmbedInstance) {\r\n        this._embed = newEmbedInstance;\r\n    }\r\n    ngOnInit() {\r\n        // Initialize PowerBI service instance variable from parent\r\n        super.ngOnInit();\r\n    }\r\n    ngOnChanges(changes) {\r\n        if (changes.embedConfig) {\r\n            const prevEmbedConfig = changes.embedConfig.previousValue;\r\n            // Check if the function is being called for the first time\r\n            if (!prevEmbedConfig) {\r\n                return;\r\n            }\r\n            // Input from parent get updated, thus call embedOrUpdateDashboard function\r\n            this.embedOrUpdatedPaginatedReport(prevEmbedConfig);\r\n        }\r\n    }\r\n    ngAfterViewInit() {\r\n        // Check if container exists on the UI\r\n        if (this.containerRef.nativeElement) {\r\n            // Decide to embed\r\n            this.embedPaginatedReport();\r\n        }\r\n    }\r\n    /**\r\n     * Embed the PowerBI Paginated report\r\n     *\r\n     * @returns void\r\n     */\r\n    embedPaginatedReport() {\r\n        // Check if the HTML container is rendered and available\r\n        if (!this.containerRef.nativeElement) {\r\n            return;\r\n        }\r\n        // Embed paginated report\r\n        this.embed = this.powerbi.embed(this.containerRef.nativeElement, this.embedConfig);\r\n    }\r\n    /**\r\n     * When component updates, choose to _embed_ the powerbi paginated report\r\n     * or do nothing if the embedUrl and accessToken did not update in the new properties\r\n     *\r\n     * @param prevEmbedConfig IEmbedConfiguration\r\n     * @returns void\r\n     */\r\n    embedOrUpdatedPaginatedReport(prevEmbedConfig) {\r\n        // Check if Embed URL and Access Token are present in current properties\r\n        if (!this.embedConfig.accessToken || !this.embedConfig.embedUrl) {\r\n            return;\r\n        }\r\n        // Embed in the following scenario\r\n        // Embed URL is updated (E.g. New paginated report is to be embedded)\r\n        if (this.containerRef.nativeElement && this.embedConfig.embedUrl !== prevEmbedConfig.embedUrl) {\r\n            this.embedPaginatedReport();\r\n        }\r\n    }\r\n}\r\nPowerBIPaginatedReportEmbedComponent.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"12.0.5\", ngImport: i0, type: PowerBIPaginatedReportEmbedComponent, deps: [], target: i0.ɵɵFactoryTarget.Component });\r\nPowerBIPaginatedReportEmbedComponent.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: \"12.0.0\", version: \"12.0.5\", type: PowerBIPaginatedReportEmbedComponent, selector: \"powerbi-paginated-report[embedConfig]\", inputs: { embedConfig: \"embedConfig\" }, viewQueries: [{ propertyName: \"containerRef\", first: true, predicate: [\"paginatedReportContainer\"], descendants: true }], usesInheritance: true, usesOnChanges: true, ngImport: i0, template: '<div class={{cssClassName}} #paginatedReportContainer></div>', isInline: true });\r\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"12.0.5\", ngImport: i0, type: PowerBIPaginatedReportEmbedComponent, decorators: [{\r\n            type: Component,\r\n            args: [{\r\n                    selector: 'powerbi-paginated-report[embedConfig]',\r\n                    template: '<div class={{cssClassName}} #paginatedReportContainer></div>',\r\n                }]\r\n        }], ctorParameters: function () { return []; }, propDecorators: { embedConfig: [{\r\n                type: Input\r\n            }], containerRef: [{\r\n                type: ViewChild,\r\n                args: ['paginatedReportContainer']\r\n            }] } });\n\n// Copyright (c) Microsoft Corporation.\r\n/**\r\n * Visual component to embed the visual, extends Base component\r\n */\r\nclass PowerBIVisualEmbedComponent extends PowerBIEmbedComponent {\r\n    constructor() {\r\n        super();\r\n    }\r\n    // Getter for this._embed\r\n    get embed() {\r\n        return this._embed;\r\n    }\r\n    // Setter for this._embed\r\n    set embed(newEmbedInstance) {\r\n        this._embed = newEmbedInstance;\r\n    }\r\n    // Returns embed object to calling function\r\n    getVisual() {\r\n        return this._embed;\r\n    }\r\n    ngOnInit() {\r\n        // Initialize PowerBI service instance variable from parent\r\n        super.ngOnInit();\r\n    }\r\n    ngOnChanges(changes) {\r\n        if (changes.embedConfig) {\r\n            const prevEmbedConfig = changes.embedConfig.previousValue;\r\n            // Check if the function is being called for the first time\r\n            if (!prevEmbedConfig) {\r\n                return;\r\n            }\r\n            // Input from parent get updated, thus call embedOrUpdateDashboard function\r\n            this.embedOrUpdateVisual(prevEmbedConfig);\r\n        }\r\n        // Set event handlers if available\r\n        if (this.eventHandlers && this.embed) {\r\n            super.setEventHandlers(this.embed, this.eventHandlers);\r\n        }\r\n    }\r\n    ngAfterViewInit() {\r\n        // Check if container exists on the UI\r\n        if (this.containerRef.nativeElement) {\r\n            // Decide to embed or bootstrap\r\n            if (this.embedConfig.accessToken && this.embedConfig.embedUrl) {\r\n                this.embedVisual();\r\n            }\r\n            else {\r\n                this.embed = this.powerbi.bootstrap(this.containerRef.nativeElement, this.embedConfig);\r\n            }\r\n        }\r\n        // Set event handlers if available\r\n        if (this.eventHandlers && this.embed) {\r\n            super.setEventHandlers(this.embed, this.eventHandlers);\r\n        }\r\n    }\r\n    /**\r\n     * Embed the PowerBI Visual\r\n     *\r\n     * @returns void\r\n     */\r\n    embedVisual() {\r\n        // Check if the HTML container is rendered and available\r\n        if (!this.containerRef.nativeElement) {\r\n            return;\r\n        }\r\n        this.embed = this.powerbi.embed(this.containerRef.nativeElement, this.embedConfig);\r\n    }\r\n    /**\r\n     * When component updates, choose to _embed_ the powerbi visual\r\n     * or do nothing if the embedUrl and accessToken did not update in the new properties\r\n     *\r\n     * @param prevEmbedConfig IVisualEmbedConfiguration\r\n     * @returns void\r\n     */\r\n    embedOrUpdateVisual(prevEmbedConfig) {\r\n        // Check if Embed URL and Access Token are present in current properties\r\n        if (!this.embedConfig.accessToken || !this.embedConfig.embedUrl) {\r\n            return;\r\n        }\r\n        // Embed in the following scenario\r\n        // Embed URL is updated (E.g. New visual is to be embedded)\r\n        if (this.containerRef.nativeElement && this.embedConfig.embedUrl !== prevEmbedConfig.embedUrl) {\r\n            this.embedVisual();\r\n        }\r\n    }\r\n}\r\nPowerBIVisualEmbedComponent.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"12.0.5\", ngImport: i0, type: PowerBIVisualEmbedComponent, deps: [], target: i0.ɵɵFactoryTarget.Component });\r\nPowerBIVisualEmbedComponent.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: \"12.0.0\", version: \"12.0.5\", type: PowerBIVisualEmbedComponent, selector: \"powerbi-visual[embedConfig]\", inputs: { embedConfig: \"embedConfig\", eventHandlers: \"eventHandlers\" }, viewQueries: [{ propertyName: \"containerRef\", first: true, predicate: [\"visualContainer\"], descendants: true }], usesInheritance: true, usesOnChanges: true, ngImport: i0, template: '<div class={{cssClassName}} #visualContainer></div>', isInline: true });\r\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"12.0.5\", ngImport: i0, type: PowerBIVisualEmbedComponent, decorators: [{\r\n            type: Component,\r\n            args: [{\r\n                    selector: 'powerbi-visual[embedConfig]',\r\n                    template: '<div class={{cssClassName}} #visualContainer></div>',\r\n                }]\r\n        }], ctorParameters: function () { return []; }, propDecorators: { embedConfig: [{\r\n                type: Input\r\n            }], eventHandlers: [{\r\n                type: Input\r\n            }], containerRef: [{\r\n                type: ViewChild,\r\n                args: ['visualContainer']\r\n            }] } });\n\n// Copyright (c) Microsoft Corporation.\r\n/**\r\n * Qna component to embed the Qna visual, extends Base component\r\n */\r\nclass PowerBIQnaEmbedComponent extends PowerBIEmbedComponent {\r\n    constructor() {\r\n        super();\r\n    }\r\n    // Getter for this._embed\r\n    get embed() {\r\n        return this._embed;\r\n    }\r\n    // Setter for this._embed\r\n    set embed(newEmbedInstance) {\r\n        this._embed = newEmbedInstance;\r\n    }\r\n    // Returns embed object to calling function\r\n    getQna() {\r\n        return this._embed;\r\n    }\r\n    ngOnInit() {\r\n        // Initialize PowerBI service instance variable from parent\r\n        super.ngOnInit();\r\n    }\r\n    ngOnChanges(changes) {\r\n        if (changes.embedConfig) {\r\n            const prevEmbedConfig = changes.embedConfig.previousValue;\r\n            // Check if the function is being called for the first time\r\n            if (!prevEmbedConfig) {\r\n                return;\r\n            }\r\n            // Input from parent get updated, thus call embedOrUpdateDashboard function\r\n            this.embedOrUpdateQna(prevEmbedConfig);\r\n        }\r\n        // Set event handlers if available\r\n        if (this.eventHandlers && this.embed) {\r\n            super.setEventHandlers(this.embed, this.eventHandlers);\r\n        }\r\n    }\r\n    ngAfterViewInit() {\r\n        // Check if container exists on the UI\r\n        if (this.containerRef.nativeElement) {\r\n            // Decide to embed or bootstrap\r\n            if (this.embedConfig.accessToken && this.embedConfig.embedUrl) {\r\n                this.embedQnaVisual();\r\n            }\r\n            else {\r\n                this.embed = this.powerbi.bootstrap(this.containerRef.nativeElement, this.embedConfig);\r\n            }\r\n        }\r\n        // Set event handlers if available\r\n        if (this.eventHandlers && this.embed) {\r\n            super.setEventHandlers(this.embed, this.eventHandlers);\r\n        }\r\n    }\r\n    /**\r\n     * Embed the PowerBI QnA Visual\r\n     *\r\n     * @returns void\r\n     */\r\n    embedQnaVisual() {\r\n        // Check if the HTML container is rendered and available\r\n        if (!this.containerRef.nativeElement) {\r\n            return;\r\n        }\r\n        this.embed = this.powerbi.embed(this.containerRef.nativeElement, this.embedConfig);\r\n    }\r\n    /**\r\n     * When component updates, choose to _embed_ the powerbi qna visual\r\n     * or do nothing if the embedUrl and accessToken did not update in the new properties\r\n     *\r\n     * @param prevEmbedConfig IQnaEmbedConfiguration\r\n     * @returns void\r\n     */\r\n    embedOrUpdateQna(prevEmbedConfig) {\r\n        // Check if Embed URL and Access Token are present in current properties\r\n        if (!this.embedConfig.accessToken || !this.embedConfig.embedUrl) {\r\n            return;\r\n        }\r\n        // Embed in the following scenario\r\n        // Embed URL is updated (E.g. New Qna visual is to be embedded)\r\n        if (this.containerRef.nativeElement && this.embedConfig.embedUrl !== prevEmbedConfig.embedUrl) {\r\n            this.embedQnaVisual();\r\n        }\r\n    }\r\n}\r\nPowerBIQnaEmbedComponent.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"12.0.5\", ngImport: i0, type: PowerBIQnaEmbedComponent, deps: [], target: i0.ɵɵFactoryTarget.Component });\r\nPowerBIQnaEmbedComponent.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: \"12.0.0\", version: \"12.0.5\", type: PowerBIQnaEmbedComponent, selector: \"powerbi-qna[embedConfig]\", inputs: { embedConfig: \"embedConfig\", eventHandlers: \"eventHandlers\" }, viewQueries: [{ propertyName: \"containerRef\", first: true, predicate: [\"qnaContainer\"], descendants: true }], usesInheritance: true, usesOnChanges: true, ngImport: i0, template: '<div class={{cssClassName}} #qnaContainer></div>', isInline: true });\r\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"12.0.5\", ngImport: i0, type: PowerBIQnaEmbedComponent, decorators: [{\r\n            type: Component,\r\n            args: [{\r\n                    selector: 'powerbi-qna[embedConfig]',\r\n                    template: '<div class={{cssClassName}} #qnaContainer></div>',\r\n                }]\r\n        }], ctorParameters: function () { return []; }, propDecorators: { embedConfig: [{\r\n                type: Input\r\n            }], eventHandlers: [{\r\n                type: Input\r\n            }], containerRef: [{\r\n                type: ViewChild,\r\n                args: ['qnaContainer']\r\n            }] } });\n\n// Copyright (c) Microsoft Corporation.\r\nclass PowerBIEmbedModule {\r\n}\r\nPowerBIEmbedModule.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"12.0.5\", ngImport: i0, type: PowerBIEmbedModule, deps: [], target: i0.ɵɵFactoryTarget.NgModule });\r\nPowerBIEmbedModule.ɵmod = i0.ɵɵngDeclareNgModule({ minVersion: \"12.0.0\", version: \"12.0.5\", ngImport: i0, type: PowerBIEmbedModule, declarations: [PowerBIDashboardEmbedComponent,\r\n        PowerBIPaginatedReportEmbedComponent,\r\n        PowerBIQnaEmbedComponent,\r\n        PowerBIReportEmbedComponent,\r\n        PowerBITileEmbedComponent,\r\n        PowerBIVisualEmbedComponent], exports: [PowerBIDashboardEmbedComponent,\r\n        PowerBIPaginatedReportEmbedComponent,\r\n        PowerBIQnaEmbedComponent,\r\n        PowerBIReportEmbedComponent,\r\n        PowerBITileEmbedComponent,\r\n        PowerBIVisualEmbedComponent] });\r\nPowerBIEmbedModule.ɵinj = i0.ɵɵngDeclareInjector({ minVersion: \"12.0.0\", version: \"12.0.5\", ngImport: i0, type: PowerBIEmbedModule, imports: [[]] });\r\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"12.0.5\", ngImport: i0, type: PowerBIEmbedModule, decorators: [{\r\n            type: NgModule,\r\n            args: [{\r\n                    declarations: [\r\n                        PowerBIDashboardEmbedComponent,\r\n                        PowerBIPaginatedReportEmbedComponent,\r\n                        PowerBIQnaEmbedComponent,\r\n                        PowerBIReportEmbedComponent,\r\n                        PowerBITileEmbedComponent,\r\n                        PowerBIVisualEmbedComponent,\r\n                    ],\r\n                    imports: [],\r\n                    exports: [\r\n                        PowerBIDashboardEmbedComponent,\r\n                        PowerBIPaginatedReportEmbedComponent,\r\n                        PowerBIQnaEmbedComponent,\r\n                        PowerBIReportEmbedComponent,\r\n                        PowerBITileEmbedComponent,\r\n                        PowerBIVisualEmbedComponent,\r\n                    ],\r\n                }]\r\n        }] });\n\n// Copyright (c) Microsoft Corporation.\n\n/**\r\n * Generated bundle index. Do not edit.\r\n */\n\nexport { PowerBIDashboardEmbedComponent, PowerBIEmbedModule, PowerBIPaginatedReportEmbedComponent, PowerBIQnaEmbedComponent, PowerBIReportEmbedComponent, PowerBITileEmbedComponent, PowerBIVisualEmbedComponent };\n"]},"metadata":{},"sourceType":"module"}